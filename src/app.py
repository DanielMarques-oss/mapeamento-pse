import streamlit as st  # Biblioteca para constru√ß√£o de aplicativos interativos
from data_loader import load_data  # Fun√ß√£o para carregar dados de fontes externas
from data_transformer import transform_data  # Fun√ß√£o para transformar e preparar dados
from map_renderer import render_map  # Fun√ß√£o para renderizar o mapa interativo
import csv  # Biblioteca para manipula√ß√£o de arquivos CSV
from st_aggrid import AgGrid, GridOptionsBuilder

# Carrega vari√°veis de ambiente a partir do arquivo .env
# load_dotenv()

# Obt√©m o valor da chave da API a partir das vari√°veis de ambiente (desativado por enquanto)
# api_key = os.getenv("API_KEY")

# Configura√ß√£o da p√°gina no Streamlit (t√≠tulo, layout e √≠cone)
st.set_page_config(
    page_title="An√°lise de Atividades PSE",  # T√≠tulo da aba
    layout="wide",  # Layout com largura m√°xima
    page_icon="üìñ",  # √çcone da aba
)

# Carregar dados de diferentes fontes, como shapefile, dados de atividades e escolas
(
    se_shp,  # Dados geogr√°ficos dos munic√≠pios
    dim_municipio_chropleth,  # Dimens√£o de munic√≠pios para o mapa coropl√©tico
    atividades_temas_pse,  # Dados sobre as atividades relacionadas a temas de sa√∫de do PSE
    parti_temas_pse,  # Dados sobre a participa√ß√£o nas atividades do PSE
    praticas_saude_pse,  # Dados sobre as pr√°ticas de sa√∫de do PSE
    parti_praticas_saude_pse,  # Dados sobre a participa√ß√£o nas pr√°ticas de sa√∫de do PSE
    escolas,  # Dados sobre as escolas
) = load_data()

# Transformar os dados carregados para prepar√°-los para visualiza√ß√£o e an√°lise
gdf_temas_praticas_pse_group, colunas_agg, pse_temas_praticas_com_inep = transform_data(
    se_shp,  # Dados geogr√°ficos
    dim_municipio_chropleth,  # Dimens√£o de munic√≠pios para o mapa
    atividades_temas_pse,  # Atividades do PSE
    parti_temas_pse,  # Participa√ß√£o nas atividades do PSE
    praticas_saude_pse,  # Pr√°ticas de sa√∫de do PSE
    parti_praticas_saude_pse,  # Participa√ß√£o nas pr√°ticas de sa√∫de do PSE
    escolas,  # Dados das escolas
)

# Sidebar com filtros interativos para o usu√°rio
colunas_disponiveis = list(colunas_agg)  # Colunas dispon√≠veis para filtro

# Obter as diferentes regi√µes de sa√∫de para filtro
regioes_saude = gdf_temas_praticas_pse_group["Regi√£o de Sa√∫de"].unique()

# Criar um seletor para escolher uma regi√£o de sa√∫de na barra lateral
regiao_saude_selecionada = st.sidebar.selectbox(
    "Selecione a regi√£o de sa√∫de:",  # T√≠tulo do seletor
    ["Todas"] + list(regioes_saude),  # Op√ß√µes: Todas ou uma lista das regi√µes de sa√∫de
)

# Se uma regi√£o espec√≠fica for selecionada, filtra os dados
if regiao_saude_selecionada != "Todas":
    # Filtrar o GeoDataFrame com base na regi√£o selecionada
    gdf_temas_praticas_pse_group = gdf_temas_praticas_pse_group[
        gdf_temas_praticas_pse_group["Regi√£o de Sa√∫de"] == regiao_saude_selecionada
    ]
    # Filtrar os dados do PSE com base na regi√£o selecionada
    pse_temas_praticas_com_inep = pse_temas_praticas_com_inep[
        pse_temas_praticas_com_inep["Regi√£o de Sa√∫de"] == regiao_saude_selecionada
    ]

# Obter as diferentes regi√µes de sa√∫de para filtro
regioes_dre = gdf_temas_praticas_pse_group["DRE"].unique()

# Criar um seletor para escolher uma regi√£o de educa√ß√£o na barra lateral
regiao_dre_selecionada = st.sidebar.selectbox(
    "Selecione a regional de educa√ß√£o:",  # T√≠tulo do seletor
    ["Todas"]
    + sorted(list(regioes_dre)),  # Op√ß√µes: Todas ou uma lista das regi√µes de educa√ß√£o
)

# Se uma regi√£o espec√≠fica for selecionada, filtra os dados
if regiao_dre_selecionada != "Todas":
    # Filtrar o GeoDataFrame com base na regi√£o selecionada
    gdf_temas_praticas_pse_group = gdf_temas_praticas_pse_group[
        gdf_temas_praticas_pse_group["DRE"] == regiao_dre_selecionada
    ]
    # Filtrar os dados do PSE com base na regi√£o selecionada
    pse_temas_praticas_com_inep = pse_temas_praticas_com_inep[
        pse_temas_praticas_com_inep["DRE"] == regiao_dre_selecionada
    ]

# Criar um seletor para escolher um munic√≠pio na barra lateral
municipio_selecionado = st.sidebar.selectbox(
    "Selecione o munic√≠pio:",  # T√≠tulo do seletor
    ["Todos"]
    + list(gdf_temas_praticas_pse_group["Municipio"].unique()),  # Lista de munic√≠pios
)

# Se um munic√≠pio espec√≠fico for selecionado, filtra os dados
if municipio_selecionado != "Todos":
    # Filtrar os dados do PSE com base no munic√≠pio selecionado
    pse_temas_praticas_com_inep = pse_temas_praticas_com_inep[
        pse_temas_praticas_com_inep["Municipio"] == municipio_selecionado
    ]
    # Filtrar o GeoDataFrame com base no munic√≠pio selecionado
    gdf_temas_praticas_pse_group = gdf_temas_praticas_pse_group[
        gdf_temas_praticas_pse_group["Municipio"] == municipio_selecionado
    ]

# Criar um seletor para escolher uma escola na barra lateral
escola_selecionada = st.sidebar.selectbox(
    "Selecione a Escola",  # T√≠tulo do seletor
    options=["Todas"]
    + list(pse_temas_praticas_com_inep["Escola"].unique()),  # Lista de escolas
)

# Se uma escola espec√≠fica for selecionada, filtra os dados
if escola_selecionada != "Todas":
    # Filtrar os dados do PSE com base na escola selecionada
    pse_temas_praticas_com_inep = pse_temas_praticas_com_inep[
        pse_temas_praticas_com_inep["Escola"] == escola_selecionada
    ]

# Criar um seletor para escolher um tema ou pr√°tica de sa√∫de na barra lateral
coluna_selecionada = st.sidebar.selectbox(
    "Tema (T) ou pr√°tica (P) para sa√∫de",  # T√≠tulo do seletor
    options=colunas_disponiveis,  # Lista de colunas de temas/pr√°ticas dispon√≠veis
)

# T√≠tulo da se√ß√£o de an√°lise do mapa
st.markdown("## Heatmap das atividades do Programa Sa√∫de na Escola (SE), 2024")

# Renderizar o mapa interativo com base nos filtros selecionados
render_map(gdf_temas_praticas_pse_group, coluna_selecionada)

# Exibir uma tabela com temas e pr√°ticas agregados por munic√≠pio
st.markdown("### Tabela com temas e pr√°ticas por munic√≠pio")
st.write("*A v√≠rgula est√° como separador de milhar e o ponto como separador decimal")

gb_gdf_temas_praticas_pse_group = GridOptionsBuilder.from_dataframe(
    gdf_temas_praticas_pse_group.drop(columns="geometry")
)
gb_gdf_temas_praticas_pse_group.configure_column("Regi√£o de Sa√∫de", pinned="left")
gb_gdf_temas_praticas_pse_group.configure_column("DRE", pinned="left")
gb_gdf_temas_praticas_pse_group.configure_column("Municipio", pinned="left")
# Aplicar configura√ß√µes no grid
gb_gdf_temas_praticas_pse_group_grid_options = gb_gdf_temas_praticas_pse_group.build()

# Exibir o dataframe com colunas fixadas
AgGrid(
    gdf_temas_praticas_pse_group.drop(columns="geometry"),
    gridOptions=gb_gdf_temas_praticas_pse_group_grid_options,
    width="100%",
)

# Exibir uma tabela com temas e pr√°ticas por escola
st.markdown("### Tabela com temas e pr√°ticas por escola")

gb_temas_praticas_pse_com_inep = GridOptionsBuilder.from_dataframe(
    pse_temas_praticas_com_inep.sort_values(
        by=["Regi√£o de Sa√∫de", "Municipio", "Escola"]
    )
)
gb_temas_praticas_pse_com_inep.configure_column("Regi√£o de Sa√∫de", pinned="left")
gb_temas_praticas_pse_com_inep.configure_column("DRE", pinned="left")
gb_temas_praticas_pse_com_inep.configure_column("Municipio", pinned="left")
gb_temas_praticas_pse_com_inep.configure_column("INEP (Escolas/Creche)", pinned="left")
# Aplicar configura√ß√µes no grid
gb_temas_praticas_pse_com_inep_grid_options = gb_temas_praticas_pse_com_inep.build()

# Exibir o dataframe com colunas fixadas
AgGrid(
    pse_temas_praticas_com_inep.sort_values(
        by=["Regi√£o de Sa√∫de", "Municipio", "Escola"]
    ),
    gridOptions=gb_temas_praticas_pse_com_inep_grid_options,
    width="100%",
)


# Abrir e ler um arquivo CSV, delimitado por v√≠rgula, com encoding ISO-8859-1, para identificar as compet√™ncias a que se referem os dados
with open("data/RelAtvColetivaMB.csv", newline="", encoding="ISO-8859-1") as csvfile:
    leitor_csv = csv.reader(csvfile, delimiter=",")  # Leitor de CSV

    # Ignorar as duas primeiras linhas e exibir a terceira linha, a das compet√™ncias
    for i, linha in enumerate(leitor_csv):
        if i == 3:  # A terceira linha est√° no √≠ndice 2 (come√ßa de 0)
            st.write(linha[0])  # Exibir a primeira c√©lula da terceira linha
            break  # Interromper o loop ap√≥s exibir a terceira linha
